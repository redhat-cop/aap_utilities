localhost ansible_connection=local

[all:vars]

# This will create or update a default admin (superuser) account in Tower
admin_user='{{ tower_admin_user }}'
admin_password='{{ tower_admin_password }}'

# Tower Secret key
# It's *very* important that this stay the same between upgrades or you will lose
# the ability to decrypt your credentials
secret_key='{{ tower_secret_key }}'

# Database Settings
# =================

# Set pg_hostname if you have an external postgres server, otherwise
# a new postgres service will be created
# pg_hostname=postgresql
{% if pg_hostname is defined %}
pg_hostname='{{ pg_hostname }}'
{% endif %}

# If using an external database, provide your existing credentials.
# If you choose to use the provided containerized Postgres depolyment, these
# values will be used when provisioning the database.
pg_database='{{ tower_pg_database }}'
pg_username='{{ tower_pg_username }}'
pg_password='{{ tower_pg_password }}'
pg_port='{{ tower_pg_port }}'
pg_sslmode='{{ tower_pg_sslmode }}'  # set to 'verify-full' for client-side enforced SSL

# Note: The user running this installer will need cluster-admin privileges.
# Tower's job execution container requires running in privileged mode,
# and a service account must be created for auto peer-discovery to work.

# Deploy into Openshift
# =====================

openshift_host='{{ openshift_host }}'
openshift_user='{{ openshift_user }}'
openshift_project='{{ openshift_project }}'
openshift_skip_tls_verify='{{ openshift_skip_tls_verify }}'

# Skip this section if you BYO database. This is only used when you want the
# installer to deploy a containerized Postgres deployment inside of your
# OpenShift cluster. This is only recommended if you have experience storing and
# managing persistent data in containerized environments.
#
# Name of a PVC you want to provision (If not using an external db)
{% if openshift_pg_pvc_name is defined %}
openshift_pg_pvc_name='{{ openshift_pg_pvc_name }}'
{% endif %}
