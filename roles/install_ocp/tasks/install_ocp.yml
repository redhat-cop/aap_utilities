---
# Configure Tower on OCP
- block:
    - name: "[Openshift] Log in (obtain access token)"
      k8s_auth:
        host: '{{ openshift_host }}'
        username: '{{ openshift_user }}'
        password: "{{ openshift_password }}"
        validate_certs: '{{ not openshift_skip_tls_verify }}'
      register: k8s_auth_results
      when: openshift_password is defined

    - name: "[Openshift] Set API token fact"
      set_fact:
        openshift_token: "{{ k8s_auth_results.k8s_auth.api_key }}"
      when: openshift_password is defined


    # Create tower project
    - name: "[Openshift] Create a k8s namespace"
      k8s:
        name: '{{ openshift_project }}'
        api_version: v1
        api_key: "{{ openshift_token }}"
        kind: Namespace
        state: present

    # Template out Persistant Volume Claim
    - name: "Template out Persistant Volume Claim"
      template:
        src: postgres-pvc.j2
        dest: "{{ tower_setup_dir }}/postgres-pvc.yml"
      when: openshift_pg_pvc_name is defined

    # Create Persistant Volume Claim
    - name: "[Openshift] Create a Persistant Volume Claim"
      k8s:
        namespace: '{{ openshift_project }}'
        state: present
        src: "{{ tower_setup_dir }}/postgres-pvc.yml"
        api_key: "{{ openshift_token }}"
      when: openshift_pg_pvc_name is defined

    # Create Inventory
    - name: "[Tower] Populate Tower Setup Inventory from Template"
      template:
        src: inventory.j2
        dest: "{{ tower_setup_dir }}/inventory"

    # Run the Setup
    - name: "[Tower] Run the Ansible Tower Setup Program"
      command: |
            ./setup_openshift.sh -e "openshift_token={{ openshift_token }}" {% if tower_verbose_install %}-- -vvv{% endif %}
      args:
        chdir: "{{ tower_setup_dir }}"
      async: 10000
      poll: 20
      changed_when: false   # these will always run and will always report “changed” otherwise

    # Get route for Ansibe Tower
    - name: "[Openshift] Get route for Ansible Tower"
      k8s_info:
        kind: Route
        namespace: '{{ openshift_project }}'
        api_key: "{{ openshift_token }}"
      register: route_details

    - name: "[Tower] Wait for Ansible tower to be running."
      uri:
        url: "https://{{ route_details.resources.0.spec.host }}"
        status_code: 200
        validate_certs: false
      register: result
      until: result.status == 200
      retries: 90
      delay: 10

  always:
    - name: If login succeeded, try to log out (revoke access token)
      when: openshift_password is defined
      k8s_auth:
        host: '{{ openshift_host }}'
        state: absent
        api_key: "{{ openshift_token }}"
        validate_certs: '{{ not openshift_skip_tls_verify }}'
...
