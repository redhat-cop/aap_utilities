---
- name: Check Automation Controller Running
  ansible.builtin.uri:
    url: "https://{{ controller_hostname }}:{{ __aap_setup_inst_controller_port }}/"
    method: GET
    user: admin
    password: "{{ aap_setup_prep_inv_secrets.all.controller_admin_password | default(aap_setup_prep_inv_vars.all.controller_admin_password) }}"
    validate_certs: "{{ controller_validate_certs | default('false') }}"
    force_basic_auth: true
  register: __aap_setup_inst_ctl_check
  ignore_errors: true
  failed_when: false
  when:
    - "'automationcontroller' in aap_setup_prep_inv_nodes"
    - not aap_setup_inst_force | bool

- name: Check Automation Hub Running
  ansible.builtin.uri:
    url: "https://{{ ah_hostname }}:{{ __aap_setup_inst_hub_port }}/api/galaxy/"
    method: GET
    user: admin
    password: "{{ aap_setup_prep_inv_secrets.all.hub_admin_password | default(aap_setup_prep_inv_vars.all.hub_admin_password) }}"
    validate_certs: "{{ ah_validate_certs | default('false') }}"
    force_basic_auth: true
  register: __aap_setup_inst_ah_check
  ignore_errors: true
  failed_when: false
  when:
    - "'automationhub' in aap_setup_prep_inv_nodes"
    - not aap_setup_inst_force | bool

- name: Check EDA Controller Running
  ansible.builtin.uri:
    url: "https://{{ eda_hostname }}:{{ __aap_setup_inst_eda_port }}/"
    method: GET
    user: admin
    password: "{{ aap_setup_prep_inv_secrets.all.eda_admin_password | default(aap_setup_prep_inv_vars.all.eda_admin_password) }}"
    validate_certs: "{{ eda_validate_certs | default('false') }}"
    force_basic_auth: true
  register: __aap_setup_inst_eda_check
  ignore_errors: true
  failed_when: false
  when:
    - "'automationeda' in aap_setup_prep_inv_nodes"
    - not aap_setup_inst_force | bool

- name: Install AAP
  when: >
    aap_setup_inst_force
    or ('automationcontroller' in aap_setup_prep_inv_nodes
        and __aap_setup_inst_ctl_check.status != 200)
    or ('automationhub' in aap_setup_prep_inv_nodes
        and __aap_setup_inst_ah_check.status != 200)
    or ('automationeda' in aap_setup_prep_inv_nodes
        and __aap_setup_inst_eda_check.status != 200)
  block:
    - name: Copy extra vars files to workspace
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ aap_setup_inst_setup_dir }}"
        mode: 0644
      loop: "{{ aap_setup_inst_extra_vars_files }}"
      register: __extra_vars_files

    - name: Updated log file location
      when: "aap_setup_inst_log_dir is defined"
      ansible.builtin.template:
        src: ansible.cfg.j2
        dest: "{{ aap_setup_inst_setup_dir }}/ansible.cfg.j2"
        mode: "0644"

    - name: Run the Ansible Automation Platform setup program
      ansible.builtin.command: "{{ lookup('template', 'containerized_sh.j2') }}"
      args:
        chdir: "{{ aap_setup_inst_setup_dir }}"
      async: 10000
      poll: 20
      changed_when: false
      # these will always run and will always report "changed" otherwise

    - name: Wait for automation controller to be running
      ansible.builtin.uri:  # use the first host from the list if no hostname is defined
        url: "https://{{ controller_hostname }}:{{ __aap_setup_inst_controller_port }}/"
        method: GET
        user: admin
        password: "{{ aap_setup_prep_inv_secrets.all.controller_admin_password | default(aap_setup_prep_inv_vars.all.controller_admin_password) }}"
        force_basic_auth: true
        status_code: 200
        validate_certs: "{{ controller_validate_certs | default(omit) }}"
      register: __aap_setup_inst_result
      until: __aap_setup_inst_result.status == 200
      retries: 90
      delay: 10
      when: "'automationcontroller' in aap_setup_prep_inv_nodes"

    - name: Wait for automation hub to be running
      ansible.builtin.uri:  # use the first host from the list if no hostname is defined
        url: "https://{{ ah_hostname }}:{{ __aap_setup_inst_hub_port }}/api/galaxy/"
        method: GET
        user: admin
        password: "{{ aap_setup_prep_inv_secrets.all.hub_admin_password | default(aap_setup_prep_inv_vars.all.hub_admin_password) }}"
        force_basic_auth: true
        status_code: 200
        validate_certs: "{{ ah_validate_certs | default(omit) }}"
      register: __aap_setup_inst_result_ah
      until: __aap_setup_inst_result_ah.status == 200
      retries: 90
      delay: 10
      when: "'automationhub' in aap_setup_prep_inv_nodes"

    - name: Wait for EDA controller to be running
      ansible.builtin.uri:  # use the first host from the list if no hostname is defined
        url: "https://{{ eda_hostname }}:{{ __aap_setup_inst_eda_port }}/"
        method: GET
        user: admin
        password: "{{ aap_setup_prep_inv_secrets.all.eda_admin_password | default(aap_setup_prep_inv_vars.all.eda_admin_password) }}"
        validate_certs: "{{ eda_validate_certs | default('false') }}"
        force_basic_auth: true
      register: __aap_setup_inst_result_eda
      until: __aap_setup_inst_result_eda.status == 200
      retries: 90
      delay: 10
      when: "'automationeda' in aap_setup_prep_inv_nodes"
...
